---
# yaml-language-server: $schema=https://kubernetes-schemas.devbu.io/helm.toolkit.fluxcd.io/helmrelease_v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: radarr-4k
  namespace: default
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 2.2.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 2
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    controllers:
      main:
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          init-db:
            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: 14
              pullPolicy: IfNotPresent
            envFrom: &envFrom
              - secretRef:
                  name: radarr-4k-secret
        containers:
          main:
            image:
              repository: ghcr.io/onedr0p/radarr-develop
              tag: 5.1.3.8246@sha256:457da7f22d52f72a58836805548cedbbd3fd4d0f808484ee16ffef125c2bb7ac
            env:
              TZ: Australia/Perth
              PUSHOVER_DEBUG: "false"
              RADARR__INSTANCE_NAME: Radarr 4K
              RADARR__PORT: &port 80
              RADARR__LOG_LEVEL: info
              RADARR__AUTHENTICATION_METHOD: External
              RADARR__AUTHENTICATION_REQUIRED: DisabledForLocalAddresses
              RADARR__THEME: dark
            envFrom: *envFrom
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: false
            resources:
              requests:
                cpu: 10m
                memory: 256M
              limits:
                memory: 1Gi
        pod:
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
            fsGroupChangePolicy: OnRootMismatch
            supplementalGroups: [10000]
    service:
      main:
        ports:
          http:
            port: *port
    ingress:
      main:
        enabled: true
        className: internal
        hosts:
          - host: &host "{{ .Release.Name }}.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  name: main
                  port: http
        tls:
          - hosts:
              - *host
    persistence:
      config:
        enabled: true
        existingClaim: radarr-4k-config
      media:
        existingClaim: media


  # values:
  #   initContainers:
  #     01-init-db:
  #       image: ghcr.io/onedr0p/postgres-init:14.9
  #       imagePullPolicy: IfNotPresent
  #       envFrom: &envFrom
  #         - secretRef:
  #             name: radarr-4k-secret
  #   controller:
  #     type: statefulset
  #     annotations:
  #       reloader.stakater.com/auto: "true"
  #   image:
  #     repository: ghcr.io/onedr0p/radarr-develop
  #     tag: 5.1.3.8246@sha256:457da7f22d52f72a58836805548cedbbd3fd4d0f808484ee16ffef125c2bb7ac
  #   env:
  #     TZ: Australia/Perth
  #     PUSHOVER_DEBUG: "false"
  #     RADARR__INSTANCE_NAME: Radarr-4K
  #     RADARR__PORT: &port 80
  #     RADARR__APPLICATION_URL: "{{ .Release.Name }}.${SECRET_DOMAIN}"
  #     RADARR__LOG_LEVEL: info
  #   envFrom: *envFrom
  #   service:
  #     main:
  #       ports:
  #         http:
  #           port: *port
  #   probes:
  #     liveness: &probes
  #       enabled: true
  #       custom: true
  #       spec:
  #         httpGet:
  #           path: /ping
  #           port: *port
  #         initialDelaySeconds: 0
  #         periodSeconds: 10
  #         timeoutSeconds: 1
  #         failureThreshold: 3
  #     readiness: *probes
  #     startup:
  #       enabled: false
  #   ingress:
  #     main:
  #       enabled: true
  #       ingressClassName: internal
  #       hosts:
  #         - host: &host "{{ .Release.Name }}.${SECRET_DOMAIN}"
  #           paths:
  #             - path: /
  #               pathType: Prefix
  #       tls:
  #         - hosts:
  #             - *host
  #   podSecurityContext:
  #     runAsUser: 1000
  #     runAsGroup: 1000
  #     fsGroup: 1000
  #     fsGroupChangePolicy: OnRootMismatch
  #     supplementalGroups: [10000]
  #   volumeClaimTemplates:
  #     - name: config
  #       mountPath: /config
  #       accessMode: ReadWriteOnce
  #       size: 10Gi
  #       storageClass: longhorn
  #   persistence:
  #     media:
  #       enabled: true
  #       type: nfs
  #       server: 10.1.2.205
  #       path: /mnt/dead/media
  #       mountPath: /media
  #   resources:
  #     requests:
  #       cpu: 10m
  #       memory: 250Mi
  #     limits:
  #       memory: 2000Mi
